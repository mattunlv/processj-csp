include "variables.csp"
include "channel-spec.csp"
include "channel.csp"
include "monitor.csp"

-- Set of ProcessJ processes.
Processes = { 0, 1 }
NULL = -1

-- Set of ProcessJ channels.
Channels = { 0 }

-- Set of nullable ProcessJ processes.
Nullable_Processes = union({NULL}, Processes)

-- Data values. 0 and 1 are distinct different values.
Values = { 0, 1 }

channel ready : Processes.Operations.Bool

-- Alphabet of the ready flags
alphaREADY = Union({alphaVARIABLE(ready.p, Bool) | p <- Processes})

READY_FLAGS = ||| p : Processes @ VARIABLE(ready.p, true)

alphaREADY_FLAGS = Union({alphaVARIABLE(ready.p, Bool) | p <- Processes})

YIELD(pid) = ready.pid.get.true -> SKIP

CHANNELS = ||| c : Channels @ (CHANNEL(c) ||| MONITOR(c))

alphaCHANNELS = 
    union(
        Union({alphaCHANNEL(c) | c <- Channels}),
		Union({alphaMONITOR(c) | c <- Channels}))

-- PROTECTED READING AND WRITING PROCESSES

UNRESTRICTED_PROCESS_WRITER(pid, chan) =
    write.chan.pid?message ->
    claim.chan!pid ->
    WRITE(pid, chan, message);
    release.chan.pid ->
    YIELD(pid);
    ack.chan.pid ->
    UNRESTRICTED_PROCESS_WRITER(pid, chan)

alphaUNRESTRICTED_PROCESS_WRITER(pid, chan) = 
    union(alphaWRITE(pid, chan), 
        {
            write.chan.pid.v,
            ack.chan.pid, 
            claim.chan.pid,
            release.chan.pid
            | v <- Values
        })

UNRESTRICTED_PROCESS_READER(pid, chan) = 
    start_read.chan.pid ->
    claim.chan!pid ->                -- 'synchronized' of isReadyToRead() (claim the monitor)
    writer.chan.get?p ->
    (if (p == -1) then               -- writer != null                         
        reader.chan.set.pid ->         -- reader = this;            [done in isReadyToRead()]
        ready.pid.set!false ->
        release.chan.pid ->           -- release the monitor
        YIELD(pid);
        SKIP
    else
        release.chan.pid ->           -- release the monitor
        SKIP
    );
    claim.chan!pid ->             -- 'synchronized' of read() (claim the monitor)
    READ(chan);              -- c.read();
    data.chan.get?message ->      -- (4) T myData = data;    [lifted out of read()]
    let                           -- Silly trick to retain message in scope 
        m = message                 -- Necessary because of the YIELD call.
    within
        release.chan.pid ->           -- release the monitor
        YIELD(pid);                   -- yield()
        read.chan.pid!m ->            -- (6) deliver the message to the environment
        UNRESTRICTED_PROCESS_READER(pid, chan)    -- Recurse to start over (simulate jump to L2)

alphaUNRESTRICTED_PROCESS_READER(pid, chan) = 
    union(alphaREAD(chan), 
        {
            start_read.chan.pid, 
            data.chan.get.v, 
            read.chan.pid.v, 
            writer.chan.get.np,
            reader.chan.set.pid, 
            ready.pid.set.false, 
            claim.chan.pid, 
            release.chan.pid
            | v <- Values, np <- Nullable_Processes
        })

UNRESTRICTED_READER_WRITER(pid, pid', chan) = 
(
    (UNRESTRICTED_PROCESS_WRITER(pid, chan) ||| UNRESTRICTED_PROCESS_READER(pid', chan))
    [| alphaCHANNELS |]
    CHANNELS
) \ alphaCHANNELS

alphaUNRESTRICTED_READER_WRITER(pid, pid', chan) = 
    union(alphaUNRESTRICTED_PROCESS_WRITER(pid, chan), alphaUNRESTRICTED_PROCESS_READER(pid', chan))

UNRESTRICTED_PJ_CHAN_SYSTEM(pid, pid', chan) =
(
    UNRESTRICTED_READER_WRITER(pid, pid', chan)
    [| alphaREADY_FLAGS |]
    READY_FLAGS
) \ alphaREADY_FLAGS

assert UNRESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0) :[deadlock free[FD]]
assert UNRESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0) :[deterministic[FD]]
assert UNRESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0) :[divergence free[FD]]

assert GENERIC_CHANNEL(0, 1, 0) [FD= UNRESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0)
assert UNRESTRICTED_PJ_CHAN_SYSTEM(0, 1, 0) [FD= GENERIC_CHANNEL(0, 1, 0)